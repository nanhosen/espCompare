// import { chart } from "highcharts"
import { formatForHighcharts } from "./formatESPData"

var n=1
const defaultDataKey = ['10', '30', 'median', '70', '90']
var originalColor
const configInit = {

  chart: {
      // type: 'boxplot',
      spacingBottom:0.1,
      
      // marginBottom:10
  },
  boost: {
    useGPUTranslations: true
  },

  title: {
      text: 'Highcharts box plot styling'
  },

  legend: {
    layout: 'vertical',
    backgroundColor: '#FFFFFF',
    align: 'right',
    verticalAlign: 'middle',
    floating: false,
    x: 0,
    y: 25,
    title: {
      text: 'Forecast Month<br/><span style="font-size: 9px; color: #666; font-weight: normal">(Click to hide)</span>',
      style: {
          fontStyle: 'italic'
      }
  },
},

  xAxis: {

  },

  yAxis: {
      title: {
          text: ''
      }
  },
  

  plotOptions: {
    series: {
      // color: 'grey',
      boostThreshold:1,
        label: {
            connectorAllowed: false
        },
        marker:{
          enabled: false
        },
      //   states: {
      //     hover: {
      //         color: 'red',
      //         // borderColor: 'gray'
      //     }
      // },

        
        // pointStart: 2010
    }
},

  

}

// llStationTraces
// : 
// BMDC2
// : 
// adj
// : 
// aug22
// : 
// 1991
// : 
// (60) [42.216, 26.429, 23.903, 23.213, 20.471, 19.519, 18.059, 28.05, 58.506, 192.951, 158.729, 64.046, 51.658, 34.835, 27.745, 23.58, 21.057, 19.665, 18.49, 31.038, 64.798, 262.604, 408.07, 185.36, 68.401, 48.272, 44.052, 35.664, 30.112, 27.355, 22.868, 39.889, 72.394, 204.07, 214.914, 65.38, 42.473, 33.757, 39.866, 31.351, 25.75, 23.306, 24.688, 45.626, 55.01, 231.571, 563.855, 435.638, 127.275, 62.929, 59.791, 43.902, 39.886, 33.938, 32.087, 41.244, 94.204, 348.676, 307.282, 113.326]
// 1992
// : 
// (60) [46.965, 34.731, 25.965, 22.54, 19.44, 19.276, 17.673, 29.326, 61.18, 254.859, 407.754, 182.528, 67.53, 43.652, 43.639, 35.393, 29.853, 27.122, 23.528, 40.029, 73.048, 212.402, 210.425, 63.918, 42.24, 33.701, 39.984, 30.892, 25.567, 23.186, 24.981, 45.562, 58.778, 240.015, 572.062, 423.357, 123.044, 63.761, 57.599, 43.625, 39.64, 33.822, 32.292, 41.558, 95.7, 354.494, 306.381, 109.016, 53.719, 39.028, 45.869, 39.286, 32.717, 28.083, 23.026, 43.765, 77.73, 310.383, 480.552, 169.575]
// 1993
// : 
// (60) [37.317, 29.683, 29.692, 24.293, 19.593, 19.005, 16.135, 30.415, 60.285, 189.568, 208.694, 61.664, 39.456, 28.566, 37.413, 29.28, 23.846, 21.574, 24.257, 43.684, 56.522, 236.319, 570.17, 423.296, 122.687, 63.481, 57.374, 43.326, 39.373, 33.583, 32.08, 41.299, 95.286, 354.092, 306.223, 108.895, 53.613, 38.93, 45.774, 39.196, 32.635, 28.01, 22.965, 43.673, 77.613, 310.267, 480.494, 169.539, 82.18, 55.127, 55.929, 42.628, 34.171, 30.299, 25.862, 41.703, 60.454, 186.242, 207.83, 99.715]
// 1994
// : 
// (60) [37.994, 28.778, 35.804, 27.954, 21.559, 20.56, 22.522, 41.125, 50.882, 237.016, 574.252, 432.562, 126.402, 57.295, 59.686, 43.794, 39.783, 33.845, 33.291, 41.474, 95.658, 355.939, 307.336, 109.629, 53.758, 39.084, 45.959, 39.288, 32.728, 28.092, 23.032, 43.77, 77.73, 310.477, 480.596, 169.579, 82.214, 55.156, 55.957, 42.653, 34.194, 30.321, 25.881, 41.728, 60.484, 186.271, 207.845, 99.728, 50.887, 32.662, 41.538, 34.593, 31.424, 27.156, 25.507, 35.925, 48.172, 198.007, 318.531, 214.301]
// 1995
// : 
// (60) [36.119, 26.884, 32.938, 24.769, 22.549, 20.325, 20.766, 27.903, 69.442, 292.937, 289.429, 105.756, 49.425, 31.939, 41.876, 35.849, 29.74, 25.34, 21.448, 40.687, 73.632, 304.289, 478.502, 169.027, 81.271, 54.408, 55.27, 41.988, 33.572, 29.744, 25.397, 41.114, 59.738, 185.526, 207.482, 99.415, 50.603, 32.411, 41.281, 34.356, 31.2, 26.959, 25.335, 35.714, 47.937, 197.661, 318.414, 214.202, 89.222, 47.085, 37.928, 30.223, 26.667, 26.271, 25.738, 30.88, 80.188, 236.912, 155.873, 50.727]
// 1996
// : 
// (60) [35.279, 25.9, 34.337, 29.256, 23.171, 20.87, 17.216, 34.449, 65.027, 287.051, 472.197, 164.825, 79.403, 48.595, 54.171, 41.087, 32.71, 28.951, 25.631, 41.11, 60.394, 192.593, 203.546, 96.71, 49.459, 31.979, 41.274, 33.788, 30.607, 26.631, 25.102, 36.063, 49.778, 203.807, 320.002, 207.563, 86.335, 46.366, 37.477, 29.98, 26.508, 26.289, 25.647, 31.199, 84.557, 240.333, 149.61, 49.942, 44.445, 32.882, 29.224, 25.654, 22.593, 20.933, 19.669, 29.259, 58.923, 237.091, 185.585, 57.682]
// 1997
// : 
// (60) [40.778, 32.023, 38.2, 29.283, 21.834, 20.443, 17.899, 30.452, 47.115, 166.225, 198.839, 93.93, 46.869, 26.922, 38.362, 31.812, 28.808, 24.868, 24.36, 34.122, 47.466, 200.171, 318.819, 207.009, 85.595, 45.817, 36.987, 29.467, 26.035, 25.839, 25.253, 30.759, 83.858, 239.817, 149.337, 49.724, 44.217, 32.683, 29.038, 25.488, 22.434, 20.785, 19.54, 29.103, 58.718, 236.893, 185.489, 57.607, 51.738, 30.325, 28.809, 28.388, 22.914, 20.019, 16.87, 21.252, 53.25, 92.099, 57.602, 24.222]
// 1998
// : 
// (60) [36.989, 24.366, 34.448, 29.178, 25.842, 23.596, 22.584, 30.856, 42.302, 186.242, 313.739, 209.988, 87.438, 42.066, 37.02, 29.424, 25.909, 25.545, 26.022, 30.522, 83.913, 240.651, 149.753, 50.068, 44.159, 32.662, 29.064, 25.404, 22.379, 20.732, 19.485, 29.032, 58.635, 236.834, 185.46, 57.572, 51.701, 30.291, 28.776, 28.359, 22.885, 19.991, 16.845, 21.221, 53.219, 92.079, 57.585, 24.205, 21.224, 20.341, 28.475, 18.812, 16.19, 15.438, 17.631, 27.481, 48.831, 152.878, 212.418, 56.551]
// 1999
// : 
// (60) [39.695, 27.937, 26.235, 21.798, 18.673, 20.048, 20.634, 24.022, 63.018, 207.151, 147.727, 47.149, 41.431, 28.293, 27.252, 24.036, 20.996, 19.454, 19.001, 27.727, 56.473, 234.743, 184.972, 57.493, 51.239, 29.924, 28.464, 27.994, 22.556, 19.689, 16.59, 20.942, 52.798, 91.824, 57.406, 24.045, 21.067, 20.193, 28.326, 18.685, 16.069, 15.326, 17.531, 27.362, 48.672, 152.726, 212.33, 56.498, 41.604, 54.132, 33.322, 24.65, 22.127, 19.967, 17.048, 42.865, 90.365, 217.794, 138.962, 53.111]
// 2000
// : 
// (60) [44.928, 30.65, 27.446, 23.525, 19.9, 19.519, 18.564, 26.683, 56.608, 248.327, 189.135, 57.484, 51.492, 27.598, 28.724, 28.309, 22.813, 19.916, 17.384, 21.458, 54.287, 94.707, 55.154, 24.055, 21.202, 20.677, 28.004, 18.503, 15.993, 15.435, 17.483, 27.774, 50.23, 164.3, 202.288, 55.358, 41.371, 54.203, 32.818, 24.549, 22.042, 19.912, 17.124, 43.836, 91.965, 220.667, 135.708, 52.603, 36.921, 32.669, 30.703, 27.78, 22.81, 21.793, 19.243, 24.767, 59.98, 249.662, 279.046, 111.64]
// 2001
// : 
// (60) [45.75, 26.461, 25.972, 26.03, 20.201, 18.682, 15.848, 19.129, 50.67, 92.808, 58.062, 23.869, 20.701, 18.198, 28.062, 18.476, 15.87, 15.144, 17.949, 27.571, 49.663, 164.218, 202.926, 55.729, 41.305, 54.158, 32.833, 24.473, 21.994, 19.867, 17.085, 43.767, 91.849, 220.604, 135.686, 52.581, 36.899, 32.647, 30.682, 27.759, 22.791, 21.776, 19.229, 24.752, 59.948, 249.615, 279.031, 111.631, 57.629, 36.785, 48.885, 37.684, 27.913, 24.158, 19.743, 27.951, 86.211, 227.991, 181.772, 69.733]
// 2002
// : 
// (60) [35.533, 28.787, 38.045, 25.231, 20.907, 20.646, 22.058, 30.748, 54.377, 175.609, 226.566, 59.037, 43.502, 51.433, 34.897, 25.953, 23.338, 21.06, 18.672, 45.257, 94.068, 223.601, 137.133, 53.551, 37.37, 33.094, 31.133, 28.093, 23.109, 22.071, 19.475, 25.018, 60.387, 250.223, 279.335, 111.777, 57.748, 36.886, 48.986, 37.771, 27.993, 24.232, 19.805, 28.023, 86.32, 228.079, 181.823, 69.776, 49.314, 36.253, 57.637, 41.546, 29.007, 24.606, 22.562, 52.213, 83.912, 218.5, 164.079, 63.248]
// 2003
// : 
// (60) [40.53, 54.506, 34.13, 24.601, 21.186, 20.188, 17.312, 42.045, 93.166, 219.851, 140.996, 53.35, 37.632, 29.757, 31.602, 28.467, 23.313, 22.142, 20.229, 25.022, 60.342, 250.822, 280.255, 112.454, 57.803, 36.968, 49.114, 37.784, 28.017, 24.252, 19.821, 28.035, 86.351, 228.116, 181.84, 69.783, 49.318, 36.257, 57.64, 41.549, 29.009, 24.607, 22.562, 52.21, 83.913, 218.502, 164.079, 63.249, 46.286, 39.724, 39.976, 33.253, 24.073, 20.088, 16.341, 17.127, 45.013, 219.518, 467.693, 216.535]
// 2004
// : 
// (60) [35.495, 30.335, 30.349, 26.912, 21.093, 21.299, 18.908, 23.147, 57.494, 251.566, 282.351, 110.924, 57.348, 33.56, 48.93, 37.691, 27.909, 24.149, 20.416, 28.187, 88.477, 232.566, 179.219, 69.686, 48.861, 36.491, 57.273, 40.611, 28.589, 24.398, 22.505, 52.657, 87.986, 219.903, 160.946, 61.967, 45.669, 39.775, 39.585, 32.394, 23.746, 19.939, 16.233, 17.362, 46.469, 231.006, 468.478, 207.068, 77.19, 43.572, 39.615, 33.748, 29.715, 27.095, 23.5, 41.302, 60.99, 293.269, 254.82, 131.682]
// 2005
// : 
// (60) [44.244, 28.376, 41.657, 32.763, 23.06, 21.002, 17.24, 24.03, 80.3, 221.198, 180.586, 68.264, 48.255, 32.44, 56.904, 40.94, 28.488, 24.133, 22.921, 52.15, 87.451, 219.459, 161.733, 62.51, 45.609, 39.737, 39.607, 32.302, 23.673, 19.868, 16.172, 17.298, 46.363, 230.638, 468.415, 207.047, 77.184, 43.564, 39.604, 33.738, 29.705, 27.084, 23.491, 41.288, 60.96, 293.224, 254.811, 131.677, 54.043, 35.906, 37.616, 33.362, 27.337, 24.348, 20.136, 23.5, 52.521, 113.036, 260.283, 70.368]
// 2006
// : 
// (60) [38.448, 30.401, 53.136, 40.277, 26.507, 23.345, 21.538, 47.135, 74.403, 209.516, 162.63, 61.919, 45.288, 35.634, 39.417, 32.76, 23.62, 19.675, 16.544, 17.058, 45.861, 229.972, 468.645, 207.467, 77.086, 43.533, 39.598, 33.646, 29.639, 27.023, 23.439, 41.222, 60.873, 293.093, 254.772, 131.646, 54.016, 35.882, 37.593, 33.341, 27.317, 24.329, 20.121, 23.484, 52.491, 113.016, 260.271, 70.358, 49.525, 28.645, 29.421, 29.666, 24.826, 22.782, 18.998, 30.479, 62.917, 137.897, 412.585, 228.422]
// 2007
// : 
// (60) [40.108, 35.746, 37.965, 32.419, 22.41, 19.609, 15.976, 15.843, 42.215, 217.387, 467.722, 214.055, 78.44, 40.058, 39.753, 33.916, 29.785, 27.067, 24.315, 41.221, 60.56, 294.448, 255.648, 132.252, 54.072, 35.96, 37.681, 33.368, 27.341, 24.349, 20.135, 23.496, 52.494, 113.033, 260.299, 70.362, 49.527, 28.646, 29.421, 29.666, 24.825, 22.78, 18.996, 30.473, 62.903, 137.885, 412.59, 228.42, 70.492, 39.812, 38.466, 31.769, 27.684, 26.082, 21.738, 36.52, 79.977, 140.926, 53.977, 27.967]
// 2008
// : 
// (60) [37.048, 24.323, 25.336, 22.435, 18.946, 18.435, 16.382, 31.078, 46.921, 260.764, 244.63, 126.11, 50.78, 30.448, 35.264, 31.247, 25.38, 22.555, 19.282, 22.294, 51.253, 118.714, 254.879, 67.758, 48.243, 27.708, 28.815, 28.776, 24.115, 22.076, 18.527, 30.216, 63.435, 144.444, 416.971, 217.732, 68.663, 39.225, 38.205, 31.406, 27.402, 25.839, 21.566, 37.452, 80.995, 141.192, 52.7, 27.477, 28.25, 23.12, 22.303, 18.574, 16.764, 15.524, 13.521, 20.313, 37.178, 101.016, 148.834, 55.105]
// 2009
// : 
// (60) [35.212, 24.316, 28.308, 25.672, 20.065, 18.963, 15.817, 18.063, 43.712, 106.452, 255.37, 67.555, 47.187, 24.613, 27.872, 28.186, 23.468, 21.543, 18.627, 29.565, 62.248, 143.476, 417.242, 218.11, 68.504, 39.112, 38.13, 31.253, 27.276, 25.719, 21.465, 37.31, 80.851, 141.103, 52.652, 27.414, 28.185, 23.06, 22.246, 18.523, 16.715, 15.479, 13.482, 20.267, 37.121, 100.961, 148.803, 55.081, 39.635, 52.428, 47.762, 30.782, 23.351, 20.465, 19.896, 26.437, 63.745, 222.723, 327.559, 100.775]
// 2010
// : 
// (60) [39.821, 24.279, 26.311, 27.098, 21.919, 21.375, 17.941, 27.95, 58.884, 137.694, 414.361, 225.937, 69.821, 36.134, 38.296, 31.613, 27.536, 25.942, 22.399, 37.472, 81.02, 141.529, 53.052, 27.934, 28.309, 23.229, 22.377, 18.595, 16.795, 15.552, 13.543, 20.338, 37.203, 101.073, 148.881, 55.123, 39.673, 52.469, 47.797, 30.809, 23.376, 20.487, 19.918, 26.462, 63.773, 222.763, 327.585, 100.789, 56.412, 50.291, 58.492, 36.826, 29.367, 25.695, 29.114, 48.376, 75.937, 153.162, 340.647, 118.417]
// 2011
// : 
// (60) [35.656, 23.736, 26.816, 22.975, 19.312, 19.61, 16.569, 28.838, 68.54, 130.18, 50.685, 24.962, 25.762, 19.11, 20.508, 16.911, 15.193, 14.064, 12.751, 18.96, 35.475, 98.997, 147.967, 54.857, 39.02, 51.788, 47.304, 30.324, 22.948, 20.106, 19.576, 26.084, 63.18, 221.928, 327.131, 100.59, 56.26, 50.139, 58.354, 36.714, 29.258, 25.594, 29.017, 48.243, 75.803, 153.038, 340.572, 118.363, 53.361, 38.254, 32.757, 29.502, 25.936, 23.888, 21.743, 36.416, 58.238, 152.943, 282.389, 92.818]
// 2012
// : 
// (60) [37.028, 26.376, 24.734, 21.223, 18.435, 17.994, 15.605, 21.313, 37.778, 116.083, 159.964, 57.347, 40.983, 49.301, 48.965, 31.666, 24.115, 21.089, 21.346, 26.982, 66.009, 237.972, 322.572, 98.9, 55.967, 51.728, 56.972, 36.26, 29.241, 25.729, 29.197, 50.198, 75.196, 158.204, 341.738, 114.318, 52.843, 38.075, 32.817, 29.416, 25.868, 23.849, 21.893, 36.708, 59.693, 157.674, 281.666, 90.234, 52.622, 34.34, 30.041, 25.878, 23.646, 21.722, 25.617, 57.023, 106.891, 238.457, 382.41, 129.583]
// 2013
// : 
// (60) [37.421, 51.383, 51.906, 34.581, 24.43, 22.177, 21.24, 26.329, 61.475, 221.655, 331.818, 100.463, 56.422, 46.113, 58.789, 37.032, 29.556, 25.865, 30.242, 50.478, 75.69, 158.844, 342.735, 114.892, 52.898, 38.169, 32.939, 29.436, 25.908, 23.884, 21.923, 36.736, 59.736, 157.714, 281.692, 90.248, 52.633, 34.349, 30.049, 25.885, 23.652, 21.727, 25.621, 57.026, 106.901, 238.477, 382.415, 129.585, 63.56, 38.466, 39.648, 33.515, 31.031, 26.874, 27.165, 29.261, 46.05, 159.804, 75.033, 32.307]
// 2014
// : 
// (60) [42.581, 39.456, 49.756, 31.09, 23.46, 21.631, 25.656, 41.911, 70.374, 142.549, 335.54, 115.509, 51.864, 33.944, 31.815, 28.676, 25.166, 23.188, 22.013, 35.963, 58.347, 156.986, 281.851, 90.383, 52.373, 34.144, 29.908, 25.663, 23.46, 21.551, 25.457, 56.744, 106.562, 238.142, 382.262, 129.491, 63.483, 38.398, 39.584, 33.457, 30.975, 26.823, 27.119, 29.212, 45.983, 159.763, 75.005, 32.282, 26.836, 21.677, 24.052, 22.505, 18.316, 16.81, 14.354, 19.361, 69.206, 176.373, 387.632, 259.678]
// 2015
// : 
// (60) [38.006, 28.063, 25.448, 23.538, 20.04, 19.744, 18.417, 31.165, 49.76, 141.87, 276.874, 90.07, 51.22, 30.945, 29.305, 25.148, 22.908, 21.069, 25.745, 56.142, 105.667, 237.377, 382.337, 129.771, 63.317, 38.302, 39.53, 33.333, 30.873, 26.731, 27.038, 29.129, 45.875, 159.688, 74.975, 32.23, 26.792, 21.638, 24.014, 22.471, 18.284, 16.78, 14.329, 19.335, 69.159, 176.295, 387.596, 259.661, 82.145, 42.693, 36.651, 31.692, 28.993, 26.398, 22.861, 34.185, 47.705, 171.659, 193.452, 59.548]
// 2016
// : 
// (60) [42.725, 27.523, 24.797, 21.593, 19.129, 18.701, 23.196, 51.19, 99.617, 234.647, 382.391, 127.586, 62.579, 34.624, 39.19, 33.102, 30.638, 26.515, 27.738, 28.98, 47.437, 161.913, 72.949, 31.983, 26.469, 21.585, 24.147, 22.172, 18.144, 16.649, 14.226, 19.769, 74.032, 176.301, 400.032, 247.654, 80.263, 42.265, 36.633, 31.513, 28.881, 26.324, 22.821, 34.598, 49.498, 178.806, 187.99, 58.475, 38.995, 36.363, 34.694, 36.721, 29.243, 23.646, 21.747, 28.066, 50.175, 121.2, 262.058, 120.121]
// 2017
// : 
// (60) [37.076, 23.921, 27.822, 24.104, 21.82, 19.952, 21.446, 22.118, 36.661, 146.128, 71.404, 28.882, 24.205, 17.677, 21.772, 20.36, 16.402, 15.066, 13.353, 18.32, 71.206, 172.401, 397.653, 247.43, 79.759, 41.868, 36.255, 31.139, 28.526, 25.996, 22.542, 34.243, 49.064, 178.373, 187.769, 58.318, 38.833, 36.211, 34.553, 36.585, 29.119, 23.536, 21.65, 27.956, 50.029, 121.078, 261.977, 120.057, 55.29, 33.557, 28.4, 26.778, 24.254, 21.775, 19.799, 31.407, 65.64, 202.753, 161.207, 65.64]
// 2018
// : 
// (60) [35.37, 24.188, 26.472, 24.277, 19.187, 18.592, 15.867, 19.817, 69.874, 197.049, 410.362, 261.734, 83.134, 39.883, 37.587, 32.509, 29.753, 27.085, 24.235, 35.126, 49.943, 180.258, 189.279, 59.196, 39.3, 36.687, 35.023, 36.934, 29.457, 23.832, 21.901, 28.22, 50.392, 121.462, 262.227, 120.225, 55.436, 33.68, 28.515, 26.886, 24.355, 21.869, 19.879, 31.5, 65.771, 202.849, 161.272, 65.693, 52.892, 38.881, 28.262, 24.093, 21.517, 20.087, 18.186, 29.921, 63.388, 251.327, 412.14, 192.36]
// 2019
// : 
// (60) [38.8, 23.599, 23.515, 21.248, 19.035, 18.562, 16.534, 25.806, 37.481, 152.613, 184.521, 55.628, 36.14, 30.822, 32.116, 34.87, 27.638, 22.06, 21.076, 26.537, 47.963, 119.333, 261.342, 120.081, 54.756, 33.117, 28, 26.311, 23.844, 21.4, 19.477, 30.993, 65.035, 202.369, 160.932, 65.443, 52.644, 38.655, 28.066, 23.917, 21.349, 19.929, 18.05, 29.734, 63.108, 250.966, 412.013, 192.281, 69.108, 48.976, 44.025, 36.105, 30.257, 27.458, 22.887, 39.423, 71.438, 197.424, 219.128, 67.457]
// 2020
// : 
// (60) [34.834, 32.654, 31.825, 34.3, 26.168, 22.232, 20.651, 25.546, 46.453, 125.023, 265.664, 118.992, 54.729, 30.389, 28.154, 26.527, 24.025, 21.563, 20.328, 31.634, 68.405, 206.185, 159.273, 64.762, 52.838, 38.04, 28.046, 23.92, 21.375, 19.968, 18.129, 31.253, 65.529, 263.576, 407.884, 185, 68.474, 48.277, 44.029, 35.716, 30.146, 27.385, 22.893, 39.914, 72.448, 204.136, 214.936, 65.389, 42.483, 33.765, 39.873, 31.357, 25.756, 23.311, 24.69, 45.627, 55.02, 231.601, 563.875, 435.64]
// [[Prototype]]
// : 
// Object
// jul22
// : 
// {1991: Array(60), 1992: Array(60), 1993: Array(60), 1994: Array(60), 1995: Array(60), 1996: Array(60), 1997: Array(60), 1998: Array(60), 1999: Array(60), 2000: Array(60), 2001: Array(60), 2002: Array(60), 2003: Array(60), 2004: Array(60), 2005: Array(60), 2006: Array(60), 2007: Array(60), 2008: Array(60), 2009: Array(60), 2010: Array(60), 2011: Array(60), 2012: Array(60), 2013: Array(60), 2014: Array(60), 2015: Array(60), 2016: Array(60), 2017: Array(60), 2018: Array(60), 2019: Array(60), 2020: Array(60)}
// jun22
// : 
// {1991: Array(60)

function makeAllTraceData(data){
  const returnData = Object.create({})
  // console.log('datahere', data)
  const returnSeries = []
  let arrayMax = 0
  let arrayMin = 0
  let arrayLength = 0
  // for(const monthYear in data){
    // returnData[monthYear]= Object.create({})
  const allStationData = data
  for( const traceYear in allStationData){
    // console.log('all station data max', allStationData[traceYear].max())
    // console.log('all station data min', allStationData[traceYear].min())
    if(allStationData[traceYear].length > arrayLength){
      arrayLength = allStationData[traceYear].length
    }
    const currMax = Math.max(...allStationData[traceYear])
    const currMin = Math.min(...allStationData[traceYear])
    if(currMax>arrayMax){
      arrayMax = currMax
    }
    if(currMin<arrayMin){
      arrayMin = currMin
    }
    returnSeries.push({name: traceYear, data: allStationData[traceYear]})
  }
  // }
  // for(const monthYear in data){
  //   returnData[monthYear]= Object.create({})
  //   const allStationData = data[monthYear]
  //   for( const traceYear in allStationData){
  //     // console.log('all station data max', allStationData[traceYear].max())
  //     // console.log('all station data min', allStationData[traceYear].min())
  //     if(allStationData[traceYear].length > arrayLength){
  //       arrayLength = allStationData[traceYear].length
  //     }
  //     const currMax = Math.max(...allStationData[traceYear])
  //     const currMin = Math.min(...allStationData[traceYear])
  //     if(currMax>arrayMax){
  //       arrayMax = currMax
  //     }
  //     if(currMin<arrayMin){
  //       arrayMin = currMin
  //     }
  //     returnSeries.push({name: traceYear, data: allStationData[traceYear]})
  //   }
  // }
  // console.log('returnSeries', returnSeries)
  // console.log('array max', arrayMax, 'min', arrayMin)
  return {seriesData: returnSeries, seriesMax: arrayMax, seriesMin: arrayMin, xMax: arrayLength}
  // const boxPlotFormat = formatForHighcharts({[value.monthYear]:formattedData}).formatBoxPlotHighcharts()

}

export function makeConfig({propHeight, propWidth}, station, agnosticData, dataType, displayDate){
  // console.log('agnostic display date', displayDate, dataType)
  // const {height, width} = size
  const width = propWidth - 50
  const {date1, date2} = displayDate && dataType ? displayDate[dataType] : {}
  // console.log('data', stationData, propHeight, station)
  // console.log('date1', date1, date2)
  // console.log('date data', agnosticData[dataType][date2])
  // const dataKey = stationData.dataKey
  // const propHeight = 520
  // const {plotData: data, name, yearKey: categories} = data
  // const height = propHeight ? `${600-20}px` : '200px'
  // const height = propHeight ? `${propHeight-20}px` : '200px'
  // console.log('agnosticData', agnosticData)
  // const rawBoxplotFormat = makeAllTraceData(agnosticData.raw)
  // const adjBoxplotFormat = makeAllTraceData(agnosticData.adj)
  // const reshapedData = reshapeData(stationData)
  const inputData = Object.create({})
  if(dataType === 'both'){
    inputData.raw = makeAllTraceData(agnosticData.raw[date2])
    inputData.adj = makeAllTraceData(agnosticData.adj[date2])
  }
  else if(dataType === 'raw'){
    inputData.raw = makeAllTraceData(agnosticData.raw[date2])
  }
  else if(dataType === 'adj'){
    inputData.adj = makeAllTraceData(agnosticData.adj[date2])
  }
  else{
    console.log('input data type is wrong', dataType, 'going to use adjusted data')
    inputData.raw = makeAllTraceData(agnosticData.raw[date2])

  }
  // console.log('input data', inputData)
  // const reshapedDataBoth = reshapeDataBoth(inputData)
  // console.log('reshapedData', reshapedData)
  // console.log('reshapedDataBoth', reshapedDataBoth)
  // const seriesArray = []
  // let  categories

  // for(const dataType in reshapedDataBoth){
  //   const currData = reshapedDataBoth[dataType]
  //   const currSeries = currData.series
  //   seriesArray.push(...currSeries)
  //    categories = currData.categories
  // }
  // console.log('serieos array', seriesArray)
  // const bothTypesObject = {categories, series: seriesArray}
  // console.log('bothTypesObject', bothTypesObject)

  // console.log('itinit coreshapedDatanfig', reshapedData)
  // const newConfig = Object.assign({}, configInit, data.series, {})
  const newxaxis = {...configInit.xAxis}
  const newConfig = 
    {
      ...configInit, 
      chart: {...configInit.chart, width},
      series:inputData && inputData[dataType] ? inputData[dataType].seriesData : [], 
      yAxis:{
        ...configInit.yAxis, 
        min:inputData && inputData[dataType] ? inputData[dataType].seriesMin : 0,
        max:inputData && inputData[dataType] ? inputData[dataType].seriesMax : 1500
      }, 
      xAxis:{
        ...configInit.xAxis, 
        min: 0,
        max:inputData && inputData[dataType] ? inputData[dataType].xMax : 60
      }, 
      // chart: {...configInit.chart, height},
      title:{
        ...configInit.title,
        text:`${makePlotTitle(station)} Excedance Probability Forecast`
      }
    }
  // console.log('nnewconfig', newConfig)
  return newConfig


}
const equals = (a, b) =>
  a.length === b.length &&
  a.every((v, i) => v === b[i]);
//   boxplot: {
//     boxDashStyle: 'Dash',
//     fillColor: '#F0F0E0',
//     lineWidth: 2,
//     medianColor: '#0C5DA5',
//     medianDashStyle: 'ShortDot',
//     medianWidth: 3,
//     stemColor: '#A63400',
//     stemDashStyle: 'dot',
//     stemWidth: 1,
//     whiskerColor: '#3D9200',
//     whiskerLength: '20%',
//     whiskerWidth: 3
// }
function reshapeData(inputData,dataType){
  // console.log('type', dataType, 'input data', inputData)
  
  const seriesAr = []
  let categoriesAr
  let i = 0
  // const colorAr = ["#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590"]
  const colorAr = ["#0fb5ae", "#4046ca", "#f68511", "#de3d82", "#7e84fa", "#72e06a", "#147af3", "#7326d3", "#e8c600", "#cb5d00", "#008f5d", "#bce931"]
  for(const monthName in inputData){
    const monthData = inputData[monthName]
    // console.log('monthData', monthData)
    // console.log(i, monthName, colorAr[i])
    const dataColor = colorAr[i] ? colorAr[i] : 'black'
    const {name, data, yearKey: categories} = monthData
    const seriesName = dataType ?  `${name}${dataType}` : name
    // console.log('categories', categories)
    seriesAr.push(
      {
        name:seriesName, 
        data, 
        color:dataColor,
        colorIndex: dataColor,
        fillColor: dataColor,
        medianColor: 'black',
        whiskerColor: 'black',
        whiskerLength: '90%',
        stemColor: 'black',
      }
    )
    if(!categoriesAr){
      categoriesAr = categories
    }
    if(!equals(categories, categoriesAr)){
      console.log('different years')
    }
    i = i + 1
  }
  return {series: seriesAr, categories: categoriesAr}
}




function reshapeDataBoth(inputData={}){
  const {raw, adj} = inputData
  const returnObj = Object.create({})

  for(const type in inputData){
    const currData = inputData[type]
    // console.log('currData', reshapeData(currData, type))
    returnObj[type] = reshapeData(currData, type)
    // reshapeData(currData, type)

  }
  return returnObj
  // const seriesAr = []
  // let categoriesAr
  // let i = 0
  // // const colorAr = ["#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590","#f94144","#f3722c","#f8961e","#f9c74f","#90be6d","#43aa8b","#577590"]
  // const colorAr = ["#0fb5ae", "#4046ca", "#f68511", "#de3d82", "#7e84fa", "#72e06a", "#147af3", "#7326d3", "#e8c600", "#cb5d00", "#008f5d", "#bce931"]
  // for(const monthName in inputData){
  //   const monthData = inputData[monthName]
  //   // console.log(i, monthName, colorAr[i])
  //   const dataColor = colorAr[i] ? colorAr[i] : 'black'
  //   const {name, data, yearKey: categories} = monthData
  //   seriesAr.push(
  //     {
  //       name, 
  //       data, 
  //       color:dataColor,
  //       colorIndex: dataColor,
  //       fillColor: dataColor,
  //       medianColor: 'black',
  //       whiskerColor: 'black',
  //       whiskerLength: '90%',
  //       stemColor: 'black',
  //     }
  //   )
  //   if(!categoriesAr){
  //     categoriesAr = categories
  //   }
  //   if(!equals(categories, categoriesAr)){
  //     console.log('different years')
  //   }
  //   i = i + 1
  //   // console.log('categories', categories)
  // }
  // return {series: seriesAr, categories: categoriesAr}
}




function makePlotTitle(id){
  const titleObj = {
    YDLC2: "Yampa",
    GJLOC:"GJLOC",
    DRGC2:"Durango",
    NVRN5:"Navajo",
    VCRC2:"Vallecito",
    TPIC2:"Taylor Park",
    CLSC2:"Crystal",
    BMDC2:"Blue Mesa",
    MPSC2:"Morrow Point",
    GRNU1:"Flaming Gorge",
    GBRW4:"Fontenelle",
    GLDA3:"Lake Powell"
  }
  return titleObj[id] ? `${titleObj[id]} (${id})` : id
}

function makePlotColor(id){
  const titleObj = {
    YDLC2: "Yampa",
    GJLOC:"GJLOC",
    DRGC2:"Durango",
    NVRN5:"Navajo",
    VCRC2:"Vallecito",
    TPIC2:"Taylor Park",
    CLSC2:"Crystal",
    BMDC2:"Blue Mesa",
    MPSC2:"Morrow Point",
    GRNU1:"Flaming Gorge",
    GBRW4:"Fontenelle",
    GLDA3:"Lake Powell"
  }
  return titleObj[id] ? titleObj[id] : id
}